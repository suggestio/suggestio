# This file defines all application routes (Higher priority routes first)


## Если path начинается с /~, то jsRevRouterTpl НЕ будет приписывать CSRF-токен к роуте.
## 2015.mar.04: Запрет доступа простых смертных к служебным ассетам, типа исходников и js-мапов. Внизу routes есть тоже самое для /assets/
GET  /vassets/$file<.+\.(src\.js|js\.map|scala|java|conf|-fastopt(-bundle)?\.js).*>       @controllers.Static.vassetsSudo(path = ASSETS_PUBLIC_ROOT, file: Asset)

## Map static resources from the /public folder to the /assets URL path
GET  /vassets/*file                     @controllers.Assets.versioned(path = ASSETS_PUBLIC_ROOT, file: Asset)


## Home page
GET  /                                  @controllers.Sc.geoSite(a: msc.ScJsState ?= msc.ScJsState.veryEmpty, x: msc.SiteQsArgs ?= msc.SiteQsArgs.empty)

## "... most browsers of all types will request /favicon.ico by default" https://stackoverflow.com/a/1445016
## TODO Заменить на moved temporary + versioned-роута, чтобы усилить кэширование?
GET  /favicon.ico                       @controllers.Assets.at(path = ASSETS_PUBLIC_ROOT, file = "images/favicon/512.ico")

## sc3+ Объединённое API:
GET  /sc/api/pub                        @controllers.Sc.pubApi(a: io.suggest.sc.sc3.MScQs)

## Рендер ровно одной карточки.
GET  /sc/one/html                       @controllers.Sc.onlyOneAd(o: blk.OneAdQsArgs)
GET  /sc/one/img                        @controllers.Sc.onlyOneAdAsImage(o: blk.OneAdQsArgs)
## Этот path к js-роутеру захардкожен в сорцах sc-sjs SrvRouter, и его лучше не менять никогда вообще.
GET  /sc/routes/:c/router.js            @controllers.Sc.scJsRouterCache(c: Int)
GET  /sc/sc.webmanifest                 @controllers.ScApp.webAppManifest(x: io.suggest.sc.pwa.MPwaManifestQs)
GET  /sc/app                            @controllers.ScApp.appDownloadInfo(a: io.suggest.sc.app.MScAppGetQs)
GET  /sc/app/ios                        @controllers.ScApp.iosInstallManifest( m: io.suggest.sc.app.MScAppManifestQs )

## sc/error: Дамп ошибок выдачи в формате до мая 2020. Удалить
POST /sc/error                          @controllers.RemoteLogs.handleScError
POST /log/rcv                           @controllers.RemoteLogs.receive

## ServiceWorker выдачи из-за scope должен жить в корне, иначе не сможет обрабатывать / (sc-site).
GET  /$file<([0-9a-h]{16,60}-)?sc-sw-sjs(-(fast)?opt)(-bundle)?\.js.*>          @controllers.Sc.swJs( path = ASSETS_PUBLIC_ROOT, file: Asset )

GET  /img/dyn                           @controllers.Img.dynImg(i: im.MImgT)
HEAD /img/dyn                           @controllers.Img.dynImgHead(i: im.MImgT)

## Обслуживание около-статических ответов.
## Cross-Origin resource sharing: preflight request:
OPTIONS /*path                          @controllers.Static.corsPreflight(path)
GET  /robots.txt                        @controllers.Static.robotsTxt
GET  /sitemap.xml                       @controllers.Static.siteMapXml
GET  /ws/ch/:c                          @controllers.Static.wsChannel( c: io.suggest.ctx.MCtxId )

## Входы в личные кабинеты
GET  /lk/nodes                          @controllers.MarketLkAdn.lkList(fromNode: Option[String] ?= None)
GET  /lk/node/create                    @controllers.MarketLkAdn.createNode
POST /lk/node/create                    @controllers.MarketLkAdn.createNodeSubmit
GET  /lk/node/profile/:nodeId           @controllers.MarketLkAdn.showAdnNode(nodeId)

## Управления карточками узла.
GET  /lk/mads/form/*nodeKey             @controllers.LkAds.adsPage(nodeKey: RcvrKey)
GET  /lk/mads/get/*nodeKey              @controllers.LkAds.getAds(nodeKey: RcvrKey, offset: Int, newAdId: Option[String] ?= None)

## Размещение рекламы на внешних сервисах
GET  /lk/xadv/ext/tg/write/:adnId       @controllers.LkAdvExt.writeTarget(adnId)
POST /lk/xadv/ext/tg/write/:adnId       @controllers.LkAdvExt.writeTargetSubmit(adnId)
GET  /ws/lk/xadv/ext/run                @controllers.LkAdvExt.wsRun(x: adv.MExtAdvQs)
POST /lk/xadv/ext/tg/delete/:tgId       @controllers.LkAdvExt.deleteTargetSubmit(tgId)
GET  /lk/xadv/ext/mad/:adId             @controllers.LkAdvExt.forAd(adId)
POST /lk/xadv/ext/mad/:adId             @controllers.LkAdvExt.forAdSubmit(adId)
GET  /lk/xadv/ext/runner/:adId          @controllers.LkAdvExt.runner(adId, x: Option[adv.MExtAdvQs])
GET  /lk/xadv/ext/oauth1/ret/:adnId     @controllers.LkAdvExt.oauth1PopupReturnGet(adnId, actorInfoQs: adv.ext.act.ActorPathQs)
POST /lk/xadv/ext/oauth1/ret/:adnId     @controllers.LkAdvExt.oauth1PopupReturnPost(adnId, actorInfoQs: adv.ext.act.ActorPathQs)

## Размещение в теге с учетом географии.
GET  /lk/xadv/geo/for/:adId             @controllers.LkAdvGeo.forAd(adId)
POST /lk/xadv/geo/for/:adId             @controllers.LkAdvGeo.forAdSubmit(adId)
POST /lk/xadv/geo/price/:adId           @controllers.LkAdvGeo.getPriceSubmit(adId)
GET  /lk/xadv/geo/tag/tags2             @controllers.LkAdvGeo.tagsSearch2(s: io.suggest.tags.MTagsSearchQs)
GET  /~/geo/map/rcvrs/:c/map.json       @controllers.Static.advRcvrsMapJson(c: Int)
GET  /lk/xadv/geo/map/rcvr/pop/:adId/:nodeId     @controllers.LkAdvGeo.rcvrMapPopup(adId: MEsUuId, nodeId: MEsUuId)
GET  /lk/xadv/geo/map/shapes/:adId      @controllers.LkAdvGeo.existGeoAdvsMap(adId)
GET  /lk/xadv/geo/map/shape/pop/:itemId @controllers.LkAdvGeo.existGeoAdvsShapePopup(itemId: Gid_t)
## Тут должен быть GET, но почему-то GET с бинарным телом не выходит из Ajax/XHR.

## ЛК: Редактор рекламных карточек v2:
GET  /lk/mad/new2/:nodeId               @controllers.LkAdEdit.createAd(nodeId: MEsUuId)
POST /lk/mad/save2                      @controllers.LkAdEdit.saveAdSubmit(mad: Option[MEsUuId] ?= None, prod: Option[MEsUuId] ?= None)
GET  /lk/mad/edit2/:adId                @controllers.LkAdEdit.editAd(adId: MEsUuId)
POST /lk/mad/up/img                     @controllers.LkAdEdit.prepareImgUpload(madId: Option[MEsUuId] ?= None, nodeId: Option[MEsUuId] ?= None)
POST /lk/mad/delete2/:adId              @controllers.LkAdEdit.deleteSubmit(adId: MEsUuId)

## ЛК: Управление под-узлами.
GET  /lk/subnodes/of/:nodeId                        @controllers.LkNodes.nodesOf(nodeId: MEsUuId)
GET  /lk/subnodes/info/:nodeId                      @controllers.LkNodes.nodeInfo(nodeId: String)
POST /lk/subnodes/create/:parentId                  @controllers.LkNodes.createSubNodeSubmit(parentId: String)
POST /lk/subnodes/enable/:nodeId/:enabled           @controllers.LkNodes.setNodeEnabled(nodeId: String, enabled: Boolean)
POST /lk/subnodes/delete/:nodeId                    @controllers.LkNodes.deleteNode(nodeId: String)
POST /lk/subnodes/edit/:nodeId                      @controllers.LkNodes.editNode(nodeId: String)
POST /lk/subnodes/madv/:adId/:isEnabled/*onNode     @controllers.LkNodes.setAdv(adId: MEsUuId, isEnabled: Boolean, onNode: RcvrKey)
GET  /lk/subnodes/mad/:adId                         @controllers.LkNodes.nodesForAd(adId: MEsUuId)
POST /lk/subnodes/tfd/*onNode                       @controllers.LkNodes.setTfDaily(onNode: RcvrKey)
POST /lk/subnodes/aso/:adId/:isEnabled/*onNode      @controllers.LkNodes.setAdvShowOpened(adId: MEsUuId, isEnabled: Boolean, onNode: RcvrKey)
POST /lk/subnodes/out/:adId/:isEnabled/*onNode      @controllers.LkNodes.setAlwaysOutlined(adId: MEsUuId, isEnabled: Boolean, onNode: RcvrKey)


## Редактор ADN-узла: v2 react
GET  /lk/node/edit2/page/:nodeId        @controllers.LkAdnEdit.editNodePage(nodeId: MEsUuId)
POST /lk/node/edit2/up/img/:nodeId      @controllers.LkAdnEdit.uploadImg(nodeId: MEsUuId)
POST /lk/node/edit2/page/:nodeId        @controllers.LkAdnEdit.save(nodeId: MEsUuId)

## ЛК: Размещение ADN-узла на карте
POST /lk/adn/map/price/:nodeId          @controllers.LkAdnMap.getPriceSubmit(nodeId: MEsUuId)
GET  /lk/adn/map/:nodeId                @controllers.LkAdnMap.forNode(nodeId: MEsUuId)
POST /lk/adn/map/:nodeId                @controllers.LkAdnMap.forNodeSubmit(nodeId: MEsUuId)
GET  /lk/adn/current/:nodeId            @controllers.LkAdnMap.currentNodeGeoGj(nodeId: MEsUuId)
GET  /lk/adn/pop/item/:itemId           @controllers.LkAdnMap.currentGeoItemPopup( itemId: Gid_t )

## lk.bill2
GET  /lk/order/:nodeId                  @controllers.LkBill2.orderPage(nodeId, orderId: Option[Gid_t] ?= None, r: Option[String] ?= None)
POST /lk/items/del                      @controllers.LkBill2.deleteItems( i: QsbSeq[Gid_t] )
POST /lk/cart/:nodeId                   @controllers.LkBill2.cartSubmit(nodeId)
GET  /lk/bill/:nodeId                   @controllers.LkBill2.onNode(nodeId)
GET  /lk/nai/:nodeId                    @controllers.LkBill2.nodeAdvInfo(nodeId, adId: Option[String] ?= None)
GET  /lk/pay/thanks                     @controllers.LkBill2.thanksForBuy(onNodeId: String)
GET  /lk/orders/:onNodeId               @controllers.LkBill2.orders(onNodeId: MEsUuId, page: Int ?= 0)
GET  /lk/order2                         @controllers.LkBill2.getOrder(orderId: Option[Gid_t] ?= None)

## lk pay systems
GET  /pay/yaka/order/:onNodeId/:orderId @controllers.pay.PayYaka.payForm(orderId: Gid_t, onNodeId: MEsUuId)
POST /pay/yaka/check                    @controllers.pay.PayYaka.check
POST /pay/yaka/payment                  @controllers.pay.PayYaka.payment
GET  /pay/yaka/success                  @controllers.pay.PayYaka.success(qs: mpay.yaka.MYakaReturnQs)
## Обработка ошибок нетривиальна: обычно GET + qs, но может быть и POST, может быть GET без нормальных параметров.
GET  /pay/yaka/fail                     @controllers.pay.PayYaka.fail(qs: mpay.yaka.MYakaReturnQs)
GET  /pay/yaka/fail                     @controllers.pay.PayYaka.failUnknown
POST /pay/yaka/fail                     @controllers.pay.PayYaka.failPostQs(qs: mpay.yaka.MYakaReturnQs)
GET  /pay/yaka/_fail                    @controllers.pay.PayYaka.failLoggedIn(orderId: Gid_t, onNodeId: MEsUuId)
## lk pay demos
GET  /demopay/yaka/order/:onNodeId/:orderId   @controllers.pay.PayYaka.demoPayForm(orderId: Gid_t, onNodeId: MEsUuId)
POST /demopay/yaka/check                @controllers.pay.PayYaka.demoCheck
POST /demopay/yaka/payment              @controllers.pay.PayYaka.demoPayment
GET  /demopay/yaka/success              @controllers.pay.PayYaka.demoSuccess(qs: mpay.yaka.MYakaReturnQs)
## Обработка ошибок нетривиальна: обычно GET + qs, но может быть и POST, может быть GET без нормальных параметров.
GET  /demopay/yaka/fail                 @controllers.pay.PayYaka.demoFail(qs: mpay.yaka.MYakaReturnQs)
GET  /demopay/yaka/fail                 @controllers.pay.PayYaka.demoFailUnknown
POST /demopay/yaka/fail                 @controllers.pay.PayYaka.demoFailPostQs(qs: mpay.yaka.MYakaReturnQs)

## Принятие приглашения на управления узлом.
GET  /lk/node/invite                    @controllers.MarketLkAdn.nodeOwnerInviteAcceptForm( e: usr.MEmailRecoverQs )
POST /lk/node/invite                    @controllers.MarketLkAdn.nodeOwnerInviteAcceptFormSubmit( e: usr.MEmailRecoverQs )

## Обращение в тех.поддерку зареганного клиента sio-market.
GET  /lk/h/support/at/:nodeId           @controllers.LkHelp.supportFormNode(nodeId, r: Option[String] ?= None)
POST /lk/h/support/at/:nodeId           @controllers.LkHelp.supportFormNodeSubmit(nodeId, r: Option[String] ?= None)
GET  /lk/h/support                      @controllers.LkHelp.supportForm(r: Option[String] ?= None)
POST /lk/h/support                      @controllers.LkHelp.supportFormSubmit(r: Option[String] ?= None)
GET  /lk/h/about                        @controllers.LkHelp.companyAbout(nodeId: Option[String] ?= None)

## Языки и локализация
GET  /lang                              @controllers.LkLang.showLangSwitcher(r: Option[String] ?= None)
POST /lang                              @controllers.LkLang.selectLangSubmit(r: Option[String])
GET  /lang/:lang/:hash/messages.js      @controllers.LkLang.lkMessagesJs(lang: String, hash: Int)
GET  /syslang/:lang/:hash/messages.js   @controllers.LkLang.sysMessagesJs(lang: String, hash: Int)

## Генераторы капч
GET  /captcha/get/:captchaId            @controllers.Captcha.getCaptchaImg(captchaId, cp: io.suggest.captcha.MCaptchaCookiePath)
GET  /captcha/get                       @controllers.Captcha.getCaptcha(t: String)

## Upload controller
## TODO Запилить поддержку подписанных JSON-моделей в jsRoutes. Название параметра "c" пока захардкожено на клиенте в UploadApi.
POST /upload/file                       @controllers.Upload.doFileUpload(u: mup.MUploadTargetQs, c: Option[io.suggest.ctx.MCtxId] ?= None)
GET  /upload/_config                    @controllers.Upload.getConfig
GET  /upload/download                   @controllers.Upload.download( d: mup.MDownLoadQs )
HEAD /upload/download                   @controllers.Upload.downloadHead( d: mup.MDownLoadQs )
GET  /upload/chunk                      @controllers.Upload.hasChunk( u: mup.MUploadTargetQs, q: io.suggest.up.MUploadChunkQs )
PUT  /upload/chunk                      @controllers.Upload.chunk( u: mup.MUploadTargetQs, q: io.suggest.up.MUploadChunkQs )


## sys
GET  /sys                               @controllers.SysMarket.sysIndex
# sys.market
GET  /sys/market                        @controllers.SysMarket.index
# sys.market.adn
GET  /sys/market/adn/:adnId             @controllers.SysMarket.showAdnNode(adnId)
GET  /sys/market/adns                   @controllers.SysMarket.adnNodesList(w: msys.MSysNodeListArgs ?= msys.MSysNodeListArgs.default)
GET  /sys/market/create/adn             @controllers.SysMarket.createAdnNode()
POST /sys/market/create/adn             @controllers.SysMarket.createAdnNodeSubmit()
POST /sys/market/adn/:adnId/delete      @controllers.SysMarket.deleteAdnNodeSubmit(adnId)
GET  /sys/market/ads                    @controllers.SysMarket.showAdnNodeAds(a: io.suggest.sc.sc3.MScQs)
POST /sys/market/mad/rm/rcvr/:adId      @controllers.SysMarket.removeAdRcvr(adId, rcvrId: Option[String] ?= None, r: Option[String] ?= None)
GET  /sys/market/adn/edit/:adnId        @controllers.SysMarket.editAdnNode(adnId)
POST /sys/market/adn/edit/:adnId        @controllers.SysMarket.editAdnNodeSubmit(adnId)
# sys.market.mart
GET  /sys/market/adn/invite/:id         @controllers.SysMarket.nodeOwnerInviteForm(id: String)
POST /sys/market/adn/invite/:id         @controllers.SysMarket.nodeOwnerInviteFormSubmit(id: String)
GET  /sys/market/adn/invite/email/:id   @controllers.SysMarket.showNodeOwnerEmailInvite(id)
# sys.market.shop
GET  /sys/market/shop/eact/:id          @controllers.SysMarket.showEmailInviteMsg(id)
GET  /sys/market/mad/email/:adId        @controllers.SysMarket.showShopEmailAdDisableMsg(adId)
POST /sys/market/login/to/:nodeId       @controllers.SysMarket.loginIntoNode(nodeId: MEsUuId)

# sys.ad
GET  /sys/mad/:adId/show                @controllers.SysMarket.showAd(adId)
GET  /sys/mad/:adId/rcvrs/analyze       @controllers.SysMarket.analyzeAdRcvrs(adId)
POST /sys/mad/:adId/rcvrs/reset         @controllers.SysMarket.resetReceivers(adId, r: Option[String] ?= None)
POST /sys/mad/:adId/rcvrs/clean         @controllers.SysMarket.cleanReceivers(adId, r: Option[String] ?= None)
# sys.ad.render - диагностический рендер одиночных карточек в html и картинки.
GET  /sys/mad/:adId/one/render/:rvar    @controllers.SysMarket.showOneAdForm(adId, rvar: msc.OneAdRenderVariant)
POST /sys/mad/:adId/one/render/:rvar    @controllers.SysMarket.oneAdFormSubmit(adId, rvar: msc.OneAdRenderVariant)

## SmDomains - управлением доменами узла.
GET  /sys/node/domain/add/:nodeId       @controllers.SysMarket.createNodeDomain(nodeId)
POST /sys/node/domain/add/:nodeId       @controllers.SysMarket.createNodeDomainFormSubmit(nodeId)
GET  /sys/node/domain/edit/:nodeId/dkey @controllers.SysMarket.editNodeDomain(nodeId, dkey)
POST /sys/node/domain/edit/:nodeId/dkey @controllers.SysMarket.editNodeDomainFormSubmit(nodeId, dkey)
POST /sys/node/domain/del/:nodeId/dkey  @controllers.SysMarket.deleteNodeDomainFormSubmit(nodeId, dkey)

## SysNodeEdges: работа с эджами узлов
GET  /sys/node/edge2                    @controllers.SysNodeEdges.editEdge(e: io.suggest.n2.edge.edit.MNodeEdgeIdQs)
POST /sys/node/edge2                    @controllers.SysNodeEdges.saveEdge(e: io.suggest.n2.edge.edit.MNodeEdgeIdQs)
DELETE /sys/node/edge2                  @controllers.SysNodeEdges.deleteEdge(e: io.suggest.n2.edge.edit.MNodeEdgeIdQs)
POST /sys/node/edges/up                 @controllers.SysNodeEdges.prepareUploadFile( e: io.suggest.n2.edge.edit.MNodeEdgeIdQs )
GET  /sys/node/edges/dl                 @controllers.SysNodeEdges.openFile( e: io.suggest.n2.edge.edit.MNodeEdgeIdQs )


## sys: Календари
GET  /sys/cal                            @controllers.SysCalendar.showCalendars
POST /sys/cal/new/tpl                    @controllers.SysCalendar.newCalendarFromTemplateSubmit
POST /sys/cal/new                        @controllers.SysCalendar.createCalendarSubmit
GET  /sys/cal/edit/:calId                @controllers.SysCalendar.editCalendar(calId)
POST /sys/cal/edit/:calId                @controllers.SysCalendar.editCalendarSubmit(calId)
GET  /sys/cal/get/:calId                 @controllers.SysCalendar.getCalendarXml(calId)

## sys: mdr - модерация контента
GET  /lk/mdr/*onNode                     @controllers.SysMdr.lkMdr( onNode: RcvrKey )
GET  /sys/mdr                            @controllers.SysMdr.sysPage
GET  /sys/mdr/next                       @controllers.SysMdr.nextMdrInfo(a: io.suggest.sys.mdr.MdrSearchArgs)
POST /sys/mdr/do                         @controllers.SysMdr.doMdr(r: io.suggest.sys.mdr.MMdrResolution)
POST /sys/mdr/repair/:nodeId             @controllers.SysMdr.fixNode(nodeId: MEsUuId)

## sys node geo
GET  /sys/adn/geo/all/:nodeId            @controllers.SysAdnGeo.forNode(nodeId)
## sys node geo shape
GET  /sys/adn/geo/add/osm/:nodeId        @controllers.SysAdnGeo.createForNodeOsm(nodeId)
POST /sys/adn/geo/add/osm/:nodeId        @controllers.SysAdnGeo.createForNodeOsmSubmit(nodeId)
POST /sys/adn/geo/delete                 @controllers.SysAdnGeo.deleteSubmit(g: mgeo.MGsPtr)
GET  /sys/adn/geo/edit/osm               @controllers.SysAdnGeo.editNodeOsm(g: mgeo.MGsPtr)
POST /sys/adn/geo/edit/osm               @controllers.SysAdnGeo.editNodeOsmSubmit(g: mgeo.MGsPtr)
GET  /sys/adn/geo/add/circl/:nodeId      @controllers.SysAdnGeo.createCircle(nodeId)
POST /sys/adn/geo/add/circl/:nodeId      @controllers.SysAdnGeo.createCircleSubmit(nodeId)
GET  /sys/adn/geo/edit/circl             @controllers.SysAdnGeo.editCircle(g: mgeo.MGsPtr)
POST /sys/adn/geo/edit/circl             @controllers.SysAdnGeo.editCircleSubmit(g: mgeo.MGsPtr)
GET  /sys/adn/geo/json                   @controllers.SysAdnGeo.showGeoJson(g: mgeo.MGsPtr)

## Карта umap
GET  /sys/umap/nodes                     @controllers.Umap.getAdnNodesMap
GET  /sys/umap/nodes/datalayer           @controllers.Umap.getDataLayerGeoJson(ngl: io.suggest.geo.MNodeGeoLevel)
POST /sys/umap/nodes/settings            @controllers.Umap.saveMapSettingsSubmit
POST /sys/umap/nodes/datalayer           @controllers.Umap.saveMapDataLayer(ngl: io.suggest.geo.MNodeGeoLevel)
POST /sys/umap/nodes/datalayer/new       @controllers.Umap.createMapDataLayer
GET  /sys/umap/node/:adnId               @controllers.Umap.getAdnNodeMap(adnId)
GET  /sys/umap/node/:adnId/datalayer     @controllers.Umap.getDataLayerNodeGeoJson(adnId, ngl: io.suggest.geo.MNodeGeoLevel)
POST /sys/umap/node/:adnId/datalayer     @controllers.Umap.saveNodeDataLayer(adnId, ngl: io.suggest.geo.MNodeGeoLevel)

## sys/Картинки
GET  /sys/img                            @controllers.SysImg.index(q: Option[String] ?= None)
POST /sys/img/search                     @controllers.SysImg.searchFormSubmit
GET  /sys/img/show                       @controllers.SysImg.showOne(i: im.MImgT)
POST /sys/img/delete                     @controllers.SysImg.deleteOneSubmit(i: im.MImgT)
## sys.img.make
GET  /sys/img/make                       @controllers.SysImg.makeForm(i: im.MImgT)
POST /sys/img/make                       @controllers.SysImg.makeFormSubmit(i: im.MImgT)

## sys.adn.install
GET  /sys/adn/inst/mads/:adnId           @controllers.SysMarket.installDfltMads(adnId)
POST /sys/adn/inst/mads/:adnId           @controllers.SysMarket.installDfltMadsSubmit(adnId)

## sys/person
GET  /sys/person                         @controllers.SysPerson.index
GET  /sys/person/reg/email/show          @controllers.SysPerson.showRegEmail
GET  /sys/person/show/:personId          @controllers.SysPerson.showPerson(personId)
GET  /sys/person/idents                  @controllers.SysPerson.allIdents(offset: Int ?= 0)


## sys/billing v2 -- Весь новый биллинг разом в этом контроллере.
GET  /sys/bill/node/:nodeId              @controllers.SysBilling.forNode(nodeId)
## посуточные тарифы
GET  /sys/bill/tf/daily/:nodeId          @controllers.SysBilling.editNodeTfDaily(nodeId)
POST /sys/bill/tf/daily/:nodeId          @controllers.SysBilling.editNodeTfDailySubmit(nodeId)
POST /sys/bill/tf/daily/del/:nodeId      @controllers.SysBilling.deleteNodeTfDaily(nodeId)
## контракты v2
GET  /sys/bill/contract/new/:nodeId      @controllers.SysBilling.createContract(nodeId)
POST /sys/bill/contract/new/:nodeId      @controllers.SysBilling.createContractSubmit(nodeId)
GET  /sys/bill/contract/edit/:nodeId     @controllers.SysBilling.editContract(nodeId)
POST /sys/bill/contract/edit/:nodeId     @controllers.SysBilling.editContractSubmit(nodeId)
POST /sys/bill/contract/delete/:nodeId   @controllers.SysBilling.deleteContractSubmit(nodeId)
## Балансы v2
GET  /sys/bill/payment/:nodeId           @controllers.SysBilling.payment(nodeId)
POST /sys/bill/payment/:nodeId           @controllers.SysBilling.paymentSubmit(nodeId)
## Обзор системы балансов v2
GET  /sys/bill                           @controllers.SysBilling.overview


## sys/debug
GET  /sys/debug                          @controllers.SysDebug.index
POST /sys/debug/adv/rcvrs/reset          @controllers.SysDebug.resetAllRcvrs
POST /sys/debug/dynimg/jdedges/reset     @controllers.SysDebug.resetImgsToOrig
POST /sys/debug/dynimg/derivatives/del   @controllers.SysDebug.deleteAllDynImgDerivatives
GET  /sys/debug/cpRes                    @controllers.SysDebug.getClassPathResourceInfoGet
POST /sys/debug/cpRes                    @controllers.SysDebug.getClassPathResourceInfoPost

## ident v2: react-форма логина.
## Password change v2
GET  /id                                @controllers.Ident.loginFormPage(e: io.suggest.id.login.ILoginFormPages ?= io.suggest.id.login.ILoginFormPages.Login.default)
POST /id/login                     @controllers.Ident.epw2LoginSubmit(r: Option[String] ?= None)
## Рега по паролю. Оптимизация: затолкать id капчи в ссылку, прописав его в cookie path.
POST /id/reg/s0                         @controllers.Ident.regStep0Submit
POST /id/reg/s1                         @controllers.Ident.epw2RegSubmit()
POST /id/reg/s2                         @controllers.Ident.smsCodeCheck
POST /id/reg/s3                         @controllers.Ident.regFinalSubmit
GET  /id/pwch                           @controllers.Ident.pwChangeForm(onNode: Option[MEsUuId] ?= None)
POST /id/pwch                           @controllers.Ident.pwChangeSubmit
GET  /id/logout                         @controllers.Ident.logout
GET  /id/epw/reg/return                 @controllers.Ident.emailReturn(e: models.usr.MEmailRecoverQs)
## ident: редирект куда-нибудь
GET  /id/rdr/me/somewhere               @controllers.Ident.rdrUserSomewhere
## ident: вход через внешнего провайдера
GET  /id/push/:extService               @controllers.Ident.extServicePushGet(extService: io.suggest.ext.svc.MExtService)
GET  /id/via/:extService                @controllers.Ident.idViaProvider(extService: io.suggest.ext.svc.MExtService, r: Option[String] ?= None)
POST /id/via/:extService                @controllers.Ident.idViaProviderByPost(extService: io.suggest.ext.svc.MExtService, r: Option[String] ?= None)
POST /id/push/:extService               @controllers.Ident.extServicePushPost(extService: io.suggest.ext.svc.MExtService)
GET  /id/reg/ext/confirm                @controllers.Ident.idpConfirm

## compat
GET  /app/session/keepalive             @controllers.Static.keepAliveSession
## Раньше был пункт меню "О проекте". Теперь редирект на буклет маркета.
GET  /privacy                           @controllers.Static.privacyPolicy
GET  /st/popup/check                    @controllers.Static.popupCheckContent
POST /_/csp/report                      @controllers.Static.handleCspReport

## Редкие обращения к ассетам напрямую. На момент перемещения вниз, это использовалось только в одном редком месте в коде.
GET  /assets/$file<.+\.(src\.js|js\.map|scala|java|conf|-fastopt\.js).*>       @controllers.Static.assetsSudo(path = ASSETS_PUBLIC_ROOT, file: Asset)
GET  /assets/*file                      @controllers.Assets.at(path = ASSETS_PUBLIC_ROOT, file)

