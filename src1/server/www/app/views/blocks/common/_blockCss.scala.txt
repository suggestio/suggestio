@(args: blk.IRenderArgs)(implicit ctx: Context)

@* Стили для блока в общем. *@
@import args._
@import models.blk.szMulted
@import util.TplDataFormatUtil._

@defining( cssClasses.map {c => List(".", c, " ")} ) { cc =>
.sm-block@{mad.id}@{cc} {
  @for(bm <- ctx.api.advUtil.getAdvMainBlockMeta(mad)) {
    width: @szMulted(bm.width, szMult)px;
    height: @szMulted(bm.height, szMult)px;
  }
  @if( mad.edges.withPredicateIter( MPredicates.Bg ).isEmpty ) {
    @for(bgColor <- mad.meta.colors.bg) {
      background-color: #@bgColor.code;
    }
  }
  @for(tl <- args.topLeft if !tl.inlineStyle) {
    @_focTopLeftCss(tl)
  }
}
}

@* Пока паттерн касается только отображения широких карточек. *@
@if(wideBg) {
  .bg.__id-@{mad.id} {
    display: block;
    margin: 0px auto;
    @for(bgColor <- mad.meta.colors.bg) {
      background-color: #@bgColor.code;
    }
  }

  .focused-container.__id-@{mad.id} {
    overflow: hidden;
    position: relative;
  }

  @for(patternColor <- mad.meta.colors.pattern; wbg <- args.wideBg) {
    .dotted-pattern.__id-@{mad.id} {
      background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="2" height="2"><line x1="0" y1="0" x2="1" y2="1" stroke-width="1" stroke="rgb(@colorHex2rgb(patternColor.code).mkString(","))"/></svg>');
      height: @{wbg.szCss.height}px;
    }
  }
}
