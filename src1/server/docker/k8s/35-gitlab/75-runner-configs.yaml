apiVersion: v1
kind: ConfigMap
metadata:
  ## Считаем, что gitlab-runner установлен через helm (в т.ч. через gitlab k8s-integration).
  labels:
    app: runner-gitlab-runner
    chart: gitlab-runner-0.3.0
    heritage: Tiller
    release: runner
  name: runner-gitlab-runner
  namespace: gitlab-managed-apps
data:
  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi
  config.toml: |
    concurrent = 1
    check_interval = 3
    log_level = "info"
    listen_address = '[::]:9252'
  configure: |
    set -e
    cp /init-secrets/* /secrets
  entrypoint: |
    #!/bin/bash
    set -e
    mkdir -p /home/gitlab-runner/.gitlab-runner/
    cp /scripts/config.toml /home/gitlab-runner/.gitlab-runner/

    # Register the runner
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi
    
    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi
    
    if ! sh /scripts/register-the-runner; then
      exit 1
    fi

    ## custom mounts for faster scala compiling:
    cat >> /home/gitlab-runner/.gitlab-runner/config.toml <<EOF
          [[runners.kubernetes.volumes.host_path]]
            name = "docker"
            host_path = "/var/run/docker.sock"
            mount_path = "/var/run/docker.sock"
            read_only = false
          [[runners.kubernetes.volumes.host_path]]
            name = "ivy2-cache"
            host_path = "/var/lib/containers/ivy2-cache"
            mount_path = "/root/.ivy2/cache"
            read_only = false
          [[runners.kubernetes.volumes.host_path]]
            name = "sbt-zinc"
            host_path = "/var/lib/containers/sbt-home"
            mount_path = "/root/.sbt"
            read_only = false
          [[runners.kubernetes.volumes.host_path]]
            name = "npm"
            host_path = "/var/lib/containers/npm-cache"
            mount_path = "/root/.npm"
            read_only = false

        [runners.kubernetes.node_selector]
          "io.suggest.sio2.build.here" = "true"
    EOF
    
    # Start the runner
    /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner
  register-the-runner: "#!/bin/bash\nMAX_REGISTER_ATTEMPTS=30\n\nfor i in $(seq 1
    \"${MAX_REGISTER_ATTEMPTS}\"); do\n  echo \"Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}\"\n
    \ /entrypoint register \\\n    --non-interactive\n\n  retval=$?\n\n  if [ ${retval}
    = 0 ]; then\n    break\n  elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then\n    exit
    1\n  fi\n\n  sleep 5 \ndone\n\nexit 0\n"

