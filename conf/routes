# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Раздача жабаскрипта всем посетителям всех сайтов. Самая частовызываемая функция.
GET  /js/v2/:domain/:qi_id              controllers.Js.v2(domain, qi_id)

# Map static resources from the /public folder to the /assets URL path
GET  /assets/*file                      controllers.Assets.at(path="/public", file)

# Home page
GET  /                                  controllers.Application.index
GET  /search                            controllers.Application.search
GET  /change_locale/:locale             controllers.Application.change_locale(locale:String)

GET  /thumb/get/$dkey<[-_\w\d~.]+>/$imageId<[-_\w\d]+>     controllers.Img.getThumb(dkey, imageId)
GET  /search/site                       controllers.Search.siteSearchGET

# ident: логины/логауты
GET  /login2/persona                    controllers.Ident.persona
POST /login2/persona                    controllers.Ident.persona_submit
GET  /login2/email_pw                   controllers.Ident.emailPwLoginForm
POST /login2/email_pw                   controllers.Ident.emailPwLoginFormSubmit
GET  /logout2                           controllers.Ident.logout

## Callback'и инсталляторов и валидаторов сайтов.
POST /js/add_domain                             controllers.Js.addDomain
POST /js/install_url/:domain/:qi_id             controllers.Js.installUrl(domain, qi_id)
GET  /js/install_ws/:domain/:qi_id/:timestamp   controllers.Js.installWs(domain, qi_id, timestamp:Long)
POST /js/ifs/:domain/:qi_id                     controllers.Js.installFromSessionFor(domain, qi_id)

# Пункт меню "О проекте"
GET     /about                          controllers.Static.about

# Пункт меню "Вживую"
GET     /showcase                       controllers.Static.showcase

GET     /badbrowser                     controllers.Static.badbrowser

# Пункт меню "Блог"
GET     /blog                           controllers.Blog.recordList
GET     /blog/:id                       controllers.Blog.readOne(id:String)
GET     /blog/delete/:id                controllers.Blog.deleteRecAdmin(id:String)
GET     /blog/new/                      controllers.Blog.newRec
POST    /blog/new                       controllers.Blog.newRecSubmit
GET     /blog/edit/:id                  controllers.Blog.editRec(id:String)
POST    /blog/edit/:id                  controllers.Blog.editRecSubmit(id:String)

GET     /help                           controllers.Static.help
GET     /help/:page                     controllers.Static.helpPage(page)


# Админка. Адресация первого sioweb почти сохранена.
GET  /admin                             controllers.Admin.index
GET  /admin/ws/:timestampMs             controllers.Admin.ws(timestampMs:Long)
POST /admin/add_domain                  controllers.Admin.addDomain
POST /admin/delete_domain               controllers.Admin.deleteDomain
GET  /admin/get_validation_file/:domain controllers.Admin.getValidationFile(domain)
GET  /admin/domain_settings/:domain     controllers.Admin.domainSettings(domain)
POST /admin/domain_settings/:domain     controllers.Admin.domainSettingsFormSubmit(domain)
POST /admin/apply_ds/:domain            controllers.Admin.applyDomainSettings(domain)

# Обратная связь.
GET  /feedback                          controllers.Feedback.feedbackForm(isAsync:Boolean ?= false)
POST /feedback                          controllers.Feedback.feedbackFormSubmit

GET  /sys                               controllers.Sys.index
GET  /sys/dkeys/all                     controllers.Sys.dkeysListAll
GET  /sys/dkey/:dkey                    controllers.Sys.dkeyShow(dkey)
GET  /sys/dkey/:dkey/search             controllers.Sys.dkeySearch(dkey)
GET  /sys/addSite                       controllers.Sys.addSiteForm
POST /sys/addSite                       controllers.Sys.addSiteFormSubmit
POST /sys/dkey/:dkey/delete             controllers.Sys.dkeyDelete(dkey)
POST /sys/majorRebuild                  controllers.Sys.majorRebuild
GET  /sys/siobix/actorTree/*path        controllers.Sys.siobixActor(path: String)
GET  /sys/siobix                        controllers.Sys.siobixIndex
GET  /sys/siobix/rebuild                controllers.Sys.siobixRebuild

GET  /sys/siobix/main/rfr/push          controllers.Sys.pushReferrerForm
POST /sys/siobix/main/rfr/push          controllers.Sys.pushReferrerFormSubmit

GET  /sys/indices                       controllers.Sys.indicesIndex
GET  /sys/indices/active                controllers.Sys.indicesListAllActive
GET  /sys/indices/active/:dkey/:vin     controllers.Sys.indicesShowActiveFor(dkey:String, vin:String)
GET  /sys/indices/vin/:vin              controllers.Sys.showVin(vin)
POST /sys/indices/downgrade/ALL         controllers.Sys.indicesDowngradeAll
GET  /sys/inx2/ALL                      controllers.Sys.inx2AllIndices
POST /sys/inx2/create/dflt/mart         controllers.Sys.inx2createDfltMart

# Входы в личные кабинеты
GET  /m                                 controllers.MarketLk.lkIndex
GET  /m/lk                              controllers.MarketLk.lkList
# Личный кабинет владельца ТЦ
GET  /m/lk/mart/:martId                 controllers.MarketMartLk.martShow(martId, newAdId: Option[String] ?= None)
GET  /m/lk/mart/:martId/shops           controllers.MarketMartLk.shopsShow(martId, sortByRaw: Option[String] ?= None, isReversed: Boolean ?= false)
POST /m/lk/mart/:martId/search          controllers.MarketMartLk.searchShops(martId)
GET  /m/lk/mart/:martId/edit            controllers.MarketMartLk.martEditForm(martId: String)
POST /m/lk/mart/:martId/edit            controllers.MarketMartLk.martEditFormSubmit(martId: String)
#POST /m/lk/mart/:martId/shop/:shopId/delete controllers.MarketMartLk.martShopDeleteSubmit(martId, shopId)
GET  /m/lk/mart/:martId/shop/invite     controllers.MarketMartLk.inviteShopForm(martId)
POST /m/lk/mart/:martId/shop/invite     controllers.MarketMartLk.inviteShopFormSubmit(martId)
POST /m/lk/mart/:martId/logo            controllers.MarketMartLk.handleMartTempLogo(martId)
GET  /m/lk/mart/shop/:shopId/edit       controllers.MarketMartLk.editShopForm(shopId)
POST /m/lk/mart/shop/:shopId/edit       controllers.MarketMartLk.editShopFormSubmit(shopId)
GET  /m/lk/mart/shop/:shopId            controllers.MarketMartLk.showShop(shopId)
GET  /m/lk/mart/shop/:shopId/on-off     controllers.MarketMartLk.shopOnOffForm(shopId)
POST /m/lk/mart/shop/:shopId/on-off     controllers.MarketMartLk.shopOnOffSubmit(shopId)
POST /m/lk/mart/shop/:shopId/set/tla    controllers.MarketMartLk.setShopTopLevelAvailable(shopId)
GET  /m/lk/mart/shop/ad/:adId/hide      controllers.MarketMartLk.shopAdHideForm(adId)
POST /m/lk/mart/shop/ad/:adId/hide      controllers.MarketMartLk.shopAdHideFormSubmit(adId)
GET  /m/lk/m/:martId/eact/:eaId         controllers.MarketMartLk.martInviteAcceptForm(martId, eaId)
POST /m/lk/m/:martId/eact/:eaId         controllers.MarketMartLk.martInviteAcceptFormSubmit(martId, eaId)

# личный кабинет купца-арендатора ТЦ.
GET  /m/lk/s/:shopId                    controllers.MarketShopLk.showShop(shopId, newAdId: Option[String] ?= None)
GET  /m/lk/s/:shopId/edit               controllers.MarketShopLk.editShopForm(shopId)
POST /m/lk/s/:shopId/edit               controllers.MarketShopLk.editShopFormSubmit(shopId)
GET  /m/lk/s/:shopId/act/:eaId          controllers.MarketShopLk.inviteAccept(shopId, eaId)
POST /m/lk/s/:shopId/act/:eaId          controllers.MarketShopLk.inviteAcceptSubmit(shopId, eaId)
# ЛК: Рекламные карточки
POST /m/lk/a/:adId/delete               controllers.MarketAd.deleteSubmit(adId)
POST /m/lk/ai/temp                      controllers.MarketAd.handleAdTempLogo
## ЛК: Рекламные карточки: shop
GET  /m/lk/s/:shopId/ad/new             controllers.MarketAd.createShopAd(shopId)
POST /m/lk/s/:shopId/ad/new             controllers.MarketAd.createShopAdSubmit(shopId)
POST /m/lk/s/:shopId/logo               controllers.MarketShopLk.handleShopTempLogo(shopId)
POST /m/lk/s/:shopId/ad/preview         controllers.MarketAd.adFormPreviewShopSubmit(shopId)
GET  /m/lk/sa/:adId/edit                controllers.MarketAd.editShopAd(adId)
POST /m/lk/sa/:adId/edit                controllers.MarketAd.editShopAdSubmit(adId)
POST /m/lk/sa/:adId/update/show         controllers.MarketAd.updateShowLevelSubmit(adId)
## ЛК: Рекламные карточки: ТЦ
GET  /m/lk/m/:martId/ad/new             controllers.MarketAd.createMartAd(martId)
POST /m/lk/m/:martId/ad/new             controllers.MarketAd.createMartAdSubmit(martId)
POST /m/lk/m/:martId/ad/preview         controllers.MarketAd.adFormPreviewMartSubmit(martId)
GET  /m/lk/ma/:adId/edit                controllers.MarketAd.editMartAd(adId)
POST /m/lk/ma/:adId/edit                controllers.MarketAd.editMartAdSubmit(adId)
# lk.billing
GET  /m/lk/bill/pay/bank/:adnId         controllers.MarketLkBilling.paymentRequsites(adnId)


# Категории: client JSON API. Используется для динамических форм заполнения карточек и в выдаче
GET  /m/c/usr/o/:ownerId/top            controllers.MarketCategory.topCatsOf(ownerId)
GET  /m/c/usr/c/:catId/dc               controllers.MarketCategory.directSubcatsOf(catId)

# Управление промо-офферами (для арендатора и для владельца ТЦ).
GET  /m/lk/s/:shopId/offers             controllers.MarketOffer.showShopPromoOffers(shopId: String)
GET  /m/lk/offer/promo/add/:shopId      controllers.MarketOffer.addPromoOfferForm(shopId: String)
# promo-offer'ы (poffer)
POST /m/lk/poffer/add/:shopId           controllers.MarketOffer.addPromoOfferFormSubmit(shopId: String)
POST /m/lk/poffer/:offerId/delete       controllers.MarketOffer.deletePromoOfferSubmit(offerId)
GET  /m/lk/poffer/:offerId              controllers.MarketOffer.showPromoOffer(offerId)
GET  /m/lk/poffer/:offerId/edit         controllers.MarketOffer.editPromoOfferForm(offerId)
POST /m/lk/poffer/:offerId/edit         controllers.MarketOffer.editPromoOfferFormSubmit(offerId)


POST /img/tmp/prepare                   controllers.Img.handleTempImg
GET  /img/tmp/:filename                 controllers.Img.getTempImg(filename)
GET  /img/orig/:imgId                   controllers.Img.getOrig(imgId)
GET  /img/any/:imgId                    controllers.Img.getImg(imgId)

# market
GET  /market/index/:martId              controllers.Market.martIndex(martId)
GET  /market/demo_website/:martId       controllers.Market.demoWebSite(martId)
GET  /market/ads/:martId                controllers.Market.findAds(martId, a: util.qsb.AdSearch)
POST /market/ads/:martId/stat/:adId     controllers.Market.adStats(martId, adId, action: String)

# sys.market
GET  /sys/market                        controllers.SysMarket.index
# sys.market.company
GET  /sys/market/companies              controllers.SysMarket.companiesList
GET  /sys/market/company/add            controllers.SysMarket.companyAddForm
POST /sys/market/company/add            controllers.SysMarket.companyAddFormSubmit
GET  /sys/market/company/:id/edit       controllers.SysMarket.companyEditForm(id: String)
POST /sys/market/company/:id/edit       controllers.SysMarket.companyEditFormSubmit(id: String)
POST /sys/market/company/:id/delete     controllers.SysMarket.companyDeleteSubmit(id: String)
GET  /sys/market/company/:id            controllers.SysMarket.companyShow(id: String)
# sys.market.mart
GET  /sys/market/marts                  controllers.SysMarket.martsList
GET  /sys/market/mart/add/:company_id   controllers.SysMarket.martAddForm(company_id: String)
POST /sys/market/mart/add/:company_id   controllers.SysMarket.martAddFormSubmit(company_id: String)
GET  /sys/market/mart/:id               controllers.SysMarket.martShow(id: String)
GET  /sys/market/mart/:id/edit          controllers.SysMarket.martEditForm(id: String)
POST /sys/market/mart/:id/edit          controllers.SysMarket.martEditFormSubmit(id: String)
POST /sys/market/mart/:id/delete        controllers.SysMarket.martDeleteSubmit(id: String)
GET  /sys/market/mart/:id/invite        controllers.SysMarket.martInviteForm(id: String)
POST /sys/market/mart/:id/invite        controllers.SysMarket.martInviteFormSubmit(id: String)
GET  /sys/market/mart/:id/invite/email  controllers.SysMarket.showMartEmailInvite(id, isHtml: Boolean)
# sys.market.shop
GET  /sys/market/shops                  controllers.SysMarket.shopsList
GET  /sys/market/shop/add               controllers.SysMarket.shopAddForm
POST /sys/market/shop/add               controllers.SysMarket.shopAddFormSubmit
GET  /sys/market/shop/:id               controllers.SysMarket.shopShow(id)
GET  /sys/market/shop/:id/edit          controllers.SysMarket.shopEditForm(id)
POST /sys/market/shop/:id/edit          controllers.SysMarket.shopEditFormSubmit(id)
POST /sys/market/shop/:id/delete        controllers.SysMarket.shopDeleteSubmit(id)
GET  /sys/market/shop/:id/eact          controllers.SysMarket.showShopEmailActMsgHtml(id, isHtml: Boolean)
GET  /sys/market/shop/:id/ads           controllers.SysMarket.showShopAds(id)
GET  /sys/market/adn/:adnId/rdr         controllers.SysMarket.adnRdr(adnId)
GET  /sys/market/s/ad/:adId/email       controllers.SysMarket.showShopEmailAdDisableMsg(adId, isHtml: Boolean ?= true)
# sys.market.shop.pricelist
GET  /sys/market/spl/add/:shopId        controllers.SysMarket.splAddForm(shopId)
POST /sys/market/spl/add/:shopId        controllers.SysMarket.splAddFormSubmit(shopId)
POST /sys/market/spl/:id/delete         controllers.SysMarket.splDeleteSubmit(id: String)
# sys.market.cats
GET  /sys/market/cats/ym                controllers.SysMarket.showYmCats
POST /sys/market/cats/ym/reset          controllers.SysMarket.resetYmCatsSubmit
POST /sys/market/cats/ym/import         controllers.SysMarket.importYmCatsSubmit
GET  /sys/market/cats/usr/add           controllers.MarketCategory.addUserCatForm(ownerId: Option[String], parentId: Option[String])
POST /sys/market/cats/usr/add           controllers.MarketCategory.addUserCatFormSubmit(ownerId: Option[String], parentId: Option[String])
GET  /sys/market/cats/usr/c/:catId      controllers.MarketCategory.showUserCat(catId)
GET  /sys/market/cats/usr/:ownerId      controllers.MarketCategory.showCatsFor(ownerId)
GET  /sys/market/cats/usr/e/:catId      controllers.MarketCategory.editUserCatForm(catId)
POST /sys/market/cats/usr/e/:catId      controllers.MarketCategory.editUserCatFormSubmit(catId)
POST /sys/market/cats/usr/:ownerId/inst/m  controllers.MarketCategory.installMartCategories(ownerId)
POST /sys/market/cats/usr/d/:catId      controllers.MarketCategory.deleteUserCatSubmit(catId)
# sys.market.billing
GET  /sys/market/billing                controllers.SysMarketBilling.index
GET  /sys/market/b/show/:adnId          controllers.SysMarketBilling.billingFor(adnId)
GET  /sys/market/b/contract/new/:adnId  controllers.SysMarketBilling.createContractForm(adnId)
POST /sys/market/b/contract/new         controllers.SysMarketBilling.createContractFormSubmit
GET  /sys/market/b/contract/edit/:cId   controllers.SysMarketBilling.editContractForm(cId: Int)
POST /sys/market/b/contract/edit/:cId   controllers.SysMarketBilling.editContractFormSubmit(cId: Int)
## Платежи обрабатываются вне контекста узлов, ибо при входящем платеже никто не знает, к кому он относится.
GET  /sys/market/b/payment/new          controllers.SysMarketBilling.incomingPaymentForm
POST /sys/market/b/payment/new          controllers.SysMarketBilling.incomingPaymentFormSubmit
POST /sys/market/b/payment/new/confirm  controllers.SysMarketBilling.confirmIncomingPaymentSubmit

