# Разные полезные функции
utils =

  # Сгенерить рандомное целое число
  rand : () ->
    Math.floor Math.random() * 10000000
  
  # Создать DOM элемент
  ce : ( tag, attributes, inhtml ) ->
    
    ne = document.createElement tag
    
    for k,v of attributes
      ne.setAttribute k, v
    
    if( typeof( inhtml ) != 'undefined' )
      ne.innerHTML = inhtml
    
    ne
  
  # Удалить DOM элемент
  re : ( e ) ->
    
    if typeof( e ) == 'string'
      e = ge(e)
    else
      e = e
    
    if( !exists( e ) || e == null )
      return false
      p = e.parentNode
    
    if( p != null )
      p.removeChild e
    
  # Проверить, есть ли объект
  exists : (o) ->
    if typeof( o ) == 'undefined'
      false
    else
      true

  # Является ли переданный объект массивом?
  is_array : (o) ->
    return Object.prototype.toString.call( o ) == '[object Array]'

  ##
  ge : () ->
    for e in arguments
      
      if typeof e == 'string' || typeof e == 'number'
        e = document.getElementById e
      
      if arguments.length == 1
        return e

      if (!ea)
        ea = new Array()
      ea.push e
    
    ea
  
  ##
  ## Найти элементы по тегу
  ge_tag : ( tag ) ->
    document.getElementsByTagName tag

  ##
  # Назначить событие / группу событий для
  # объекта / группы объектов
  bind : (o, eventType, listener) ->
    if typeof o == 'undefined' || o == null
      return false;

    if utils.is_array o
      for _single_obj in o
        utils.add_listener _single_obj, eventType, listener
    else
      utils.add_listener o, eventType, listener

  ##
  # Назначить событие / группу событий на объект
  add_listener : ( o, eventType, listener ) ->
    # Если группа событий
    if utils.is_array eventType
      for _singleEventType in eventType
        utils.add_single_listener o, _singleEventType, listener

    # одно событие
    else
      utils.add_single_listener o, eventType, listener

  ##
  # Назначить объекту одно событие
  add_single_listener : (o, eventType, listener) ->
    if o.addEventListener
      o.addEventListener eventType, listener, false
    else
      if o.attachEvent
        o.attachEvent 'on' + eventType, () ->
          listener.apply o

  ##
  # Есть ли у переданного элемента запрошенный класс
  hasClass : (element, value) ->
    _class_pattern = new RegExp(value, "gi")
    element.className.match( _class_pattern )

  ##
  is_retina : () ->
    if window.devicePixelRatio > 1
      true
    else
      false

  ##
  # Добавить указанный класс к переданному элементу
  addClass : (element, value) ->
    element = ge element if typeof( element ) == 'string' else element
    
    if element==null
      return 0
    
    if !element.className
      element.className = value
    else
      newClassName = element.className
      _class_pattern = new RegExp(value, "gi")
      
      if newClassName.match( _class_pattern )
        return false
      
      newClassName += " "
      newClassName += value
      element.className = newClassName

  # Удалить указанный класс с элемента
  removeClass : (element, value) ->
    element = ge(element)
    
    if element==null
      return 0
    
    if !element.className
      element.className = ''
    else
      newClassName = element.className.replace(value,'').replace(/\s{2,}/g, ' ')
      element.className = newClassName
  
  # Показать объект
  show : ( element ) ->
    if ge element == null
      return false
    
    ge(element).style.display = 'block'
  
  hide : ( element ) ->
    if ge element == null
      return false
    
    ge(element).style.display = 'none'

  remove_first_slash : ( str ) ->
    str.replace(/^\/|\/$/g, '');

  load_css : ( href ) ->
    style_elt = utils.ce 'link', {'rel':'stylesheet','type':'text/css','id':'sio_css', 'href' : href}
    utils.ge_tag('head')[0].appendChild style_elt
  	